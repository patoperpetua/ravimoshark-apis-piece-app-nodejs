openapi: 3.0.0
info:
  version: 1.0.0
  title: Ravimoshark Piece API
  termsOfService: 'https://ravimoshark.com/terms/'
  contact:
    email: dev@ravimoshark.com
    url: 'http://ravimoshark.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |
    This is an API to interact with Ravimoshark piece database.
    # Introduction
    This API allow to create, modify and delete pieces and products (cards, details and key points).
    # User Authentication
    This API does not contain any kind of user validation but It request to have a valid authentication user to interact with it. For more information about user Authentication, please refer to [Ravimoshark User Authentication](https://ravimoshark.com/back/apis/auth/latest).
externalDocs:
  description: Find out how to interact with Ravimoshark's APIs.
  url: 'https://ravimoshark.com/back/apis/auth/latest'
tags:
  - name: Products
    description: Operations about products.
  - name: Categories
    description: Operations about categories.
  - name: Pieces
    description: Operations about pieces.
servers:
  - url: 'http://localhost:8003'
  - url: 'https://ravimoshark.com/back/apis/piece/v1'
  - url: 'https://ravimoshark.com/back/apis/piece/latest'
paths:
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories.
      description: Get all categories.
      operationId: getCategories
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/OrderBy'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Deleted'
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/Category'
      responses:
        '200':
          description: Request OK.
          headers:
            - $ref: '#/components/headers/Limit'
            - $ref: '#/components/headers/Remaining'
            - $ref: '#/components/headers/Reset'
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Categories'
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Categories
  /pieces:
    get:
      tags:
        - Pieces
      summary: Get all pieces.
      description: Get all pieces.
      operationId: getPieces
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/OrderBy'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Deleted'
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/Category'
      responses:
        '200':
          description: Request OK.
          headers:
            - $ref: '#/components/headers/Limit'
            - $ref: '#/components/headers/Remaining'
            - $ref: '#/components/headers/Reset'
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pieces'
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Pieces
  '/pieces/{refArticle}':
    get:
      tags:
        - Pieces
      summary: Get one piece.
      description: Get one piece.
      operationId: getPieceById
      parameters:
        - $ref: '#/components/parameters/RefArticle'
        - $ref: '#/components/parameters/Deleted'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pieces'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Pieces
  /products:
    get:
      tags:
        - Products
      summary: Get all products.
      description: Get all products.
      operationId: getProducts
      parameters:
        - $ref: '#/components/parameters/Skip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/OrderBy'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Deleted'
        - $ref: '#/components/parameters/Metadata'
        - $ref: '#/components/parameters/Category'
      responses:
        '200':
          description: Request OK.
          headers:
            - $ref: '#/components/headers/Limit'
            - $ref: '#/components/headers/Remaining'
            - $ref: '#/components/headers/Reset'
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Metadata'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Products'
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Products
  '/products/{refArticle}':
    get:
      tags:
        - Products
      summary: Get one product.
      description: Get one product.
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/RefArticle'
        - $ref: '#/components/parameters/Deleted'
      responses:
        '200':
          description: Request OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
      x-swagger-router-controller: Products
components:
  schemas:
    Categories:
      type: string
      default: ALL
      enum:
        - ALL
        - DETERGENTS
        - DISHWASHER
        - MACHINES
        - REPAIRED_PIECES
        - WATER_TREATMENT
    CustomError:
      type: object
      required:
        - message
      properties:
        code:
          type: string
        message:
          type: string
        data:
          type: string
    Deleted:
      type: string
      default: ACTIVE
      enum:
        - ACTIVE
        - DELETED
        - ALL
    IdInteger:
      description: Object's Id.
      type: object
      properties:
        id:
          type: integer
          format: int64
    Metadata:
      type: object
      properties:
        first:
          type: integer
          format: int64
        prev:
          type: integer
          format: int64
        self:
          type: integer
          format: int64
        next:
          type: integer
          format: int64
        last:
          type: integer
          format: int64
    PieceCards:
      description: Pieces card information.
      type: object
      properties:
        id:
          type: integer
          format: int64
        piece:
          $ref: '#/components/schemas/Pieces'
        refArticle:
          type: string
        description:
          type: string
        categoryId:
          type: string
        category:
          $ref: '#/components/schemas/PieceCategories'
        imageName:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deleted:
          type: boolean
    PieceCategories:
      description: Pieces categories information.
      type: object
      properties:
        name:
          type: string
        imageName:
          type: string
        imageExtension:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deleted:
          type: boolean
    PieceDetails:
      description: Pieces detail information.
      type: object
      properties:
        id:
          type: integer
          format: int64
        piece:
          $ref: '#/components/schemas/Pieces'
        refArticle:
          type: string
        title:
          type: string
        content:
          type: string
        unit:
          type: string
        line:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deleted:
          type: boolean
    PieceKeyPoints:
      description: Pieces Key Point information.
      type: object
      properties:
        id:
          type: integer
          format: int64
        piece:
          $ref: '#/components/schemas/Pieces'
        refArticle:
          type: string
        content:
          type: string
        line:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deleted:
          type: boolean
    Pieces:
      description: Pieces information.
      type: object
      properties:
        refArticle:
          type: string
        name:
          type: string
        state:
          type: string
        priceSale:
          type: number
          format: float
        saleUnit:
          type: number
          format: float
        family:
          type: string
        priceLastPurchase:
          type: number
          format: float
        packaging:
          type: string
        detergentType:
          type: string
        weight:
          type: number
          format: float
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deleted:
          type: boolean
    Products:
      description: Products information.
      type: object
      properties:
        piece:
          $ref: '#/components/schemas/Pieces'
        refArticle:
          type: string
        card:
          $ref: '#/components/schemas/PieceCards'
        pieceDetails:
          type: array
          items:
            $ref: '#/components/schemas/PieceDetails'
        pieceKeyPoints:
          type: array
          items:
            $ref: '#/components/schemas/PieceKeyPoints'
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deleted:
          type: boolean
    RefArticle:
      description: Piece's reference.
      type: object
      properties:
        refContract:
          type: string
  responses:
    '204':
      description: Response is empty.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    '400':
      description: Some parameters are missing or badly entered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: string
    '404':
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
    '405':
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomError'
  parameters:
    Category:
      name: category
      description: category of desired product.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/Categories'
    Deleted:
      name: deleted
      in: query
      description: 'Get all, deleted, not deleted data. Default not deleted.'
      required: false
      schema:
        $ref: '#/components/schemas/Deleted'
        default: ACTIVE
    Filter:
      name: filterBy
      description: filter data.
      in: query
      required: false
      schema:
        type: string
    Id:
      name: id
      description: id to delete or search
      in: path
      required: true
      schema:
        type: integer
        format: int64
    Limit:
      name: limit
      description: max records to return
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 10
    Metadata:
      name: metadata
      description: If metadata is needed (for pagination controls)
      in: query
      required: false
      schema:
        type: boolean
        default: false
    OrderBy:
      name: orderBy
      description: order by property.
      in: query
      required: false
      schema:
        type: string
    RefArticle:
      name: refArticle
      description: reference of piece to delete or search
      in: path
      required: true
      schema:
        type: integer
        format: int64
    RefArticleQuery:
      name: refArticle
      description: RefArticle from a desired client
      in: query
      required: false
      schema:
        type: string
    Skip:
      name: skip
      description: number of item to skip
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 0
  headers:
    Limit:
      description: The number of allowed requests in the current period
      schema:
        type: integer
        format: int64
    Remaining:
      description: The number of remaining requests in the current period
      schema:
        type: integer
        format: int64
    Reset:
      description: The number of seconds left in the current period
      schema:
        type: integer
        format: int64
